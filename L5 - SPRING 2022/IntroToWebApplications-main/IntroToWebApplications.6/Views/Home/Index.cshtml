<!DOCTYPE html>
<html>
    <head>
        <title>dicioccio</title>
    </head>
    <body>
        <h1>About Me</h1>
        <h2>Part A - Intro</h2>
        <p>Adam Di Cioccio<br>041019241<br>dici0007@algonquinlive.com</p>
        <p>
            Hi my name is Adam and I am currently in Semester 5 of Computer Engineering Technologies.
            My favourite course this year so far is .NET Enterprise as I really love the C# language.
            I currently work at Argo blockchain in Software Systems which I mainly use python to create scripts and manage our databases.
        </p>
        <p>
            I expect this course to be fun but also challenging as it is our last year in the program.
            I think I will learn new languages such as C#, Razor, Blazor and other useful tools that will be handy in my career.
            I would love to explore lots of the C# libraries and all the utilities the language has to offer.
        </p>
        <h2>Part B - Questions</h2>
        <h3>C# is a strongly or loosely typed language? Why?</h3>
        <p>C# is a type-safe or strongly typed language as you have to declare types when creating variables or constants.
        In loosely typed languages you don't have to declare types such as python when you can initialize a variable with just its name and the value. (Ex. number = 5)</p>

        <h3>C# is declarative or imperative? Why?</h3>
        <p>The C# language is both declarative and imperative.
        The reason it is imperative is because it inherits a lot of its statements from the C language which can change the programs state.
        The reason it is declarative as well is because it also uses statements provided by LINQ in order to execute SQL commands.</p>

        <h3>Explain implicit types in C# and give an example.</h3>
        <p>Implicit type is when you can create and initialize a variable without a type.
        In the C# language you need to use the keyword var in order to declare a variable without a designated type. (Ex. var number = 100;)</p>

        <h3>What is a ‘Property’ in C# as it relates to classes and objects?</h3>
        <p>A property in C# is a natural extension of fields and can be found inside classes and usually contain a get and set method.</p>

        <h3>Describe the MVC design pattern. Explain its components.</h3>
        <p>The MVC designe pattern consists of three following elements including the Model, View and Contoller.
        Model - The Model contains all the backend code that contains all the program logic. 
        View - Contains all the elements the user can see (User Interface)
        Controller - Is the code that provides functionality to the view including buttons and interactive elements.</p>

        <h3>Describe the purpose of the Program.cs class in this project.</h3>
        <p>Program.cs is treated like the main class and uses Kestral in order to create the web application.
        This file creates and configures the website allowing it to run on Azure.</p>

        <h3>MVC Core applications can ‘host’ themselves: true or false.</h3>
        <p>True.</p>

        <h3>Explain what happens in memory when we make a value type nullable.</h3>
        <p>They do not contain a Heap Memory Address therefore you can't make a value type nullable.</p>

        <h3>Name and define three cloud computing models?</h3>
        <p>
            The three main cloud computing models are Software, Platform and Infrastructure as a Service.
            <b>Software as a Service</b> - Allows users to host applications over the internet and users don't have to download anything in order to access this service.
            <b>Platform as a Service</b> - Gives users access to a platform in order to develop their software over the internet.
            <b>Infrastructure as a Service</b> - Allows users to use their own servers so they don't have to use their own sort of infrastructure.
        </p>

        <h3>Explain Git branches and why we use them?</h3>
        <p>Git branches are a great way to split off from a project in order to collaborate easier amongst others.
        When you work with others they are able to branch off the main project in case they make a mistake so it only modifies there personal branch and then only pushing it to main when corrected.</p>

        <h3>Explain dependency injection and why we use it?</h3>
        <p>Dependency injection is a software design pattern that allows development of loosely coupled code.</p>
    </body>
</html>